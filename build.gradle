buildscript {
    ext.kotlinVersion = '1.1.51'
    ext.dokkaVersion = '0.9.15'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

configure(subprojects) {
    group 'tech.pronghorn'

    apply plugin: 'kotlin'
    apply plugin: 'ivy-publish'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'org.junit.platform.gradle.plugin'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    repositories {
        mavenCentral()
    }

    kotlin {
        experimental {
            coroutines 'enable'
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
        testCompile 'org.mockito:mockito-core:2.10.0'
    }

    dokka {
        moduleName = project.name
        outputFormat = 'javadoc'
        outputDirectory = "docs/${project.name}"
        processConfigurations = ['compile']
        sourceDirs = files('src/main/kotlin')
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    if(project.hasProperty('special')) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    if(project.hasProperty('special')) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                }

                pom {
                    version = version
                    groupId = 'tech.pronghorn'
                }

                pom.project {
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'caturner81'
                            name 'Chris Turner'
                            email 'chris@pronghorn.tech'
                        }
                    }
                }
            }
        }
    }
}

project(':common') {
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    }
}

project(':plugin-collections-jctools') {
    dependencies {
        compile 'org.jctools:jctools-core:2.1.0'
        compile project(':common')
    }
}

project(':plugin-hashing-openhft') {
    dependencies {
        compile 'net.openhft:zero-allocation-hashing:0.8'
        compile project(':common')
    }
}

project(':plugin-logging-slf4j') {
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile project(':common')
    }
}

project(':coroutines') {
    dependencies {
        compile project(':common')
        testCompile project(':plugin-collections-jctools')
        testCompile project(':plugin-hashing-openhft')
        testCompile project(':plugin-logging-slf4j')
    }
}

project(':server') {
    dependencies {
        compile project(':coroutines')
        testRuntime 'ch.qos.logback:logback-classic:1.2.3'
        testCompile project(':plugin-collections-jctools')
        testCompile project(':plugin-hashing-openhft')
        testCompile project(':plugin-logging-slf4j')
    }
}

project(':mongodb-driver-stream') {
    dependencies {
        compile project(':server')
        compile 'org.mongodb:mongodb-driver-async:3.5.0'
        testRuntime 'ch.qos.logback:logback-classic:1.2.3'
        testCompile project(':plugin-collections-jctools')
        testCompile project(':plugin-hashing-openhft')
        testCompile project(':plugin-logging-slf4j')
    }
}
